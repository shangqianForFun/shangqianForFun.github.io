<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>阿谦</title>
    <description>welcome</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 Oct 2017 17:48:25 +0800</pubDate>
    <lastBuildDate>Tue, 24 Oct 2017 17:48:25 +0800</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>dispatch _ barrier _ sync和dispatch _ barrier _ async 的区别</title>
        <description>&lt;p&gt;#dispatch _ barrier _ sync和dispatch _ barrier _ async 的区别&lt;/p&gt;

&lt;p&gt;前几天在看SDWebImage源码的时候看到了这两个API&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;dispatch_barrier_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;barrierQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URLCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URLCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Handle single download of simultaneous download request for the same URL
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callbacksForURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URLCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;progressBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kProgressCallbackKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;progressBlock&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completedBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kCompletedCallbackKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completedBlock&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callbacksForURL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URLCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callbacksForURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;createCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;翻译过来大家一般都叫做栅栏函数,在一个线程队列里如果希望先完成某些任务之后,再执行之后的任务,就可以使用这个函数来操作,这是barrier的意思,但是为什么还有一个sync 和 async呢?
 举个例子&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 
 &lt;span class=&quot;n&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_queue_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test.queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DISPATCH_QUEUE_CONCURRENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;1111&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;2222&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;3333&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_barrier_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;1000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;2000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;3000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;after barrier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;888888888&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;99999999&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;4444&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;5555&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;6666&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[4042:758675] 888888888&lt;/p&gt;

&lt;p&gt;[4042:758953] 2222&lt;/p&gt;

&lt;p&gt;[4042:758951] 3333&lt;/p&gt;

&lt;p&gt;[4042:758952] 1111&lt;/p&gt;

&lt;p&gt;[4042:758675] 99999999&lt;/p&gt;

&lt;p&gt;[4042:758952] 1000000&lt;/p&gt;

&lt;p&gt;[4042:758952] 2000000&lt;/p&gt;

&lt;p&gt;[4042:758952] 3000000&lt;/p&gt;

&lt;p&gt;[4042:758952] 4444&lt;/p&gt;

&lt;p&gt;[4042:758951] 5555&lt;/p&gt;

&lt;p&gt;[4042:758960] 6666&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;em&gt;修改为sync之后的打印&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;**&lt;/p&gt;

&lt;p&gt;[4084:768014] 2222&lt;/p&gt;

&lt;p&gt;[4084:768015] 1111&lt;/p&gt;

&lt;p&gt;[4084:768020] 3333&lt;/p&gt;

&lt;p&gt;[4084:767596] 1000000&lt;/p&gt;

&lt;p&gt;[4084:767596] 2000000&lt;/p&gt;

&lt;p&gt;[4084:767596] 3000000&lt;/p&gt;

&lt;p&gt;[4084:767596] 888888888&lt;/p&gt;

&lt;p&gt;[4084:767596] 99999999&lt;/p&gt;

&lt;p&gt;[4084:768015] 4444&lt;/p&gt;

&lt;p&gt;[4084:768021] 5555&lt;/p&gt;

&lt;p&gt;[4084:768020] 6666&lt;/p&gt;

&lt;p&gt;两个函数都能够保证 在queue中任务的执行barrier前面的先执行完成,然后再执行barrier里面和后面的任务,区别在于,888888 和 999999这两个的执行时机,在使用sync的时候 888888和999999的执行永远是在barrier中的任务执行完成之后再执行因为sync就是为了阻塞当前队列(当前为主队列). 而async则不会阻塞当前队列,所以在第一次的打印中888888和99999的执行和barrier就无关了,任何时候都可能打印.&lt;/p&gt;

&lt;p&gt;再回到SD的源码中,使用sync的原因是因为为了在当前线程中(异步)线程中同步的去执行当前的代码.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/iOS-dispatch_barrier/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/iOS-dispatch_barrier/</guid>
        
        
      </item>
    
      <item>
        <title>iOS通用链</title>
        <description>&lt;h1 id=&quot;问题&quot;&gt;问题&lt;/h1&gt;
&lt;h6 id=&quot;产品提出需求说要做类似电商类app在微信分享页中或者qq中跳转我们自己的app的功能一般情况下来说直接想到的就是配置url-schema然后让前端同学进行跳转然后在分别在这三个方法中进行处理但是现在都是只用后两个了&quot;&gt;产品提出需求，说要做类似电商类app在微信分享页中或者qq中跳转我们自己的app的功能，一般情况下来说直接想到的就是配置url schema，然后让前端同学进行跳转，然后在分别在这三个方法中进行处理（但是现在都是只用后两个了）&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;3个回调的功能基本一样，都是在别人通过URL Schemes打开应用的时候会执行的&lt;/li&gt;
  &lt;li&gt;A回调是在iOS2.0的时候推出的，参数只有url。&lt;/li&gt;
  &lt;li&gt;B回到是在iOS4.2的时候推出的，参数有url sourceApplication annotation.&lt;/li&gt;
  &lt;li&gt;C回调是iOS9.0的时候推出的，参数有url options。options有下面几个key&lt;/li&gt;
  &lt;li&gt;这几个回调是有优先级的。C&amp;gt;B&amp;gt;A。也就是说，如果你3个回调都实现了，那么程序只会执行C回调。其他回调是不会执行的。（当然，iOS9以下只会执行B回调）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url NS_DEPRECATED_IOS(2_0, 9_0, &quot;Please use application:openURL:options:&quot;) __TVOS_PROHIBITED;
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(nullable NSString *)sourceApplication annotation:(id)annotation NS_DEPRECATED_IOS(4_2, 9_0, &quot;Please use application:openURL:options:&quot;) __TVOS_PROHIBITED;
- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&amp;lt;NSString*, id&amp;gt; *)options NS_AVAILABLE_IOS(9_0); // no equiv. notification. return NO if the application can't open for some reason

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Keys for application:openURL:options:
UIKIT_EXTERN NSString *const UIApplicationOpenURLOptionsSourceApplicationKey NS_AVAILABLE_IOS(9_0);   // value is an NSString containing the bundle ID of the originating application
UIKIT_EXTERN NSString *const UIApplicationOpenURLOptionsAnnotationKey NS_AVAILABLE_IOS(9_0);   // value is a property-list typed object corresponding to what the originating application passed in UIDocumentInteractionController's annotation property
UIKIT_EXTERN NSString *const UIApplicationOpenURLOptionsOpenInPlaceKey NS_AVAILABLE_IOS(9_0);   // value is a bool NSNumber, set to YES if the file needs to be copied before use

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h6 id=&quot;然而我们的腾讯爸爸屏蔽了这个功能qq和微信在自身的浏览器中都是无法打开我们的app的于是就要祭出ios9之后推出的新技术-universal-link&quot;&gt;然而我们的腾讯爸爸屏蔽了这个功能，QQ和微信在自身的浏览器中都是无法打开我们的app的，于是就要祭出iOS9之后推出的新技术 &lt;strong&gt;universal link&lt;/strong&gt;&lt;/h6&gt;

&lt;h1 id=&quot;universal-link简介&quot;&gt;Universal Link简介&lt;/h1&gt;
&lt;h6 id=&quot;简单来说即当用户在-wkwebviewuiwebview-或者-safari-中点击一个链接如果设备上安装了适配该链接的-app就可以跳转该-app-对应的页面否则仍然展示网页网上已经有一堆讲universal-link-配置的blog我这里大概总结一下容易步骤&quot;&gt;简单来说即当用户在 WKWebView、UIWebView 或者 Safari 中点击一个链接，如果设备上安装了适配该链接的 app，就可以跳转该 app 对应的页面，否则仍然展示网页。网上已经有一堆讲universal link 配置的blog，我这里大概总结一下容易步骤&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;1 创建一个包含 JSON 数据的 apple-app-site-association 文件，内容格式如下：
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/716949-c15209a21e60754e.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;appID:’teamID’ + ‘bundleID’&lt;/p&gt;

&lt;p&gt;path: 你所指定的网页可以跳转自己app的路径&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2 将apple-app-site-association 文件上传到服务器的 “.well-known” 或者根目录下或者根目录，如果.well-known没有回去根目录找 但前提是存放这个文件的域名必须是经过HTTPS 加密的！必须是HTTPS 重要的事情说三遍，否则苹果不认的，因为毕竟这是iOS9之后推出的技术。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3 在Xcode - TARGETS - Capabilities 中打开 “Associated Domains” 开关，在Domains中添加需要进行跳转的域名（所有适配的域名前面都需要加上 “applinks:” 才能生效）；苹果就是根据这个配置去指定的域名下去下载文件的(在app第一次启动的时候就会去下载，不确定是第一次安装还是每次启动都会去检查更新，这里没有测试)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/716949-173a542df7935519.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4 然后去苹果官网提供的网址进行校验，你会发现怎么都无法通过，这个地方有点儿坑，因为苹果是拿线上的app去进行校验的，所以只要在通讯录，或者短信，或者邮件中打开universal link只要能跳转成功，就说明OK了。&lt;/li&gt;
  &lt;li&gt;5 实现的代理方法&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray *))restorationHandler
{
    if ([userActivity.activityType   isEqualToString:NSUserActivityTypeBrowsingWeb]) {

      NSURL *webpageURL = userActivity.webpageURL;
      NSString *host = webpageURL.host;

      if ([host isEqualToString:@&quot;xxxx.com&quot;]) { // &quot;xxxx.com&quot;为配置的域名
        // 解析路径、跳转到指定界面 啦啦啦啦
         }
    else {
      [[UIApplication sharedApplication]openURL:webpageURL];
    }
  }
  return YES;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;6 跨域问题&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a user is browsing your website in Safari and they tap a universal link to a URL in the same domain as the current webpage, iOS respects the user’s most likely intent and opens the link in Safari. If the user taps a universal link to a URL in a different domain, iOS opens the link in your app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;这里也是比较坑的地方你当前浏览器所打开的网页域名要和你跳转的universal-link-的域名不同才能跳转否则他就会认为你想在safari中打开然后就打开了对应的网页所以一般情况下都需要去解析一个二级域名去专门对这个universal-link-进行跳转&quot;&gt;这里也是比较坑的地方你当前浏览器所打开的网页域名要和你跳转的universal link 的域名不同才能跳转，否则他就会认为你想在Safari中打开，然后就打开了对应的网页。所以一般情况下都需要去解析一个二级域名去专门对这个universal link 进行跳转。&lt;/h6&gt;

</description>
        <pubDate>Sun, 16 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/iOS-%E9%80%9A%E7%94%A8%E9%93%BE/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/iOS-%E9%80%9A%E7%94%A8%E9%93%BE/</guid>
        
        
      </item>
    
      <item>
        <title>iOS运行状态&amp;后台执行</title>
        <description>&lt;h3 id=&quot;非运行状态&quot;&gt;非运行状态&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;app 没有启动，或者正在运行，但是被系统杀死。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;闲置状态&quot;&gt;闲置状态&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;app在前台运行，但是当前没有接收事件(可能在执行一些代码)这是一个短暂的中转状态。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;运行状态&quot;&gt;运行状态&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;app在前台运行，并且在接收事件，这是一个前台app的普通状态。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;后台状态&quot;&gt;后台状态&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;app在后台运行并且在执行一些代码。大多数app在被挂起之前，只会在这个状态短暂的停留，然而，一个app可以请求额外的运行时间，以保持这个状态更长的时间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;挂起状态&quot;&gt;挂起状态&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;app在后台不执行代码。系统会将app自动设置为这个状态，并且设置之前不会告知app。当app挂起的时候，app留在内存里但是不执行任何代码。当系统遇到一个低内存的情况，系统会悄悄的清除挂起的app，为前台的app获取更多的空间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://i2.muimg.com/567571/bdd2059b085d158b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;app后台运行&quot;&gt;app后台运行&lt;/h1&gt;
&lt;p&gt;大多数app可以被系统挂起，但是有一些app需要在后台继续运行，例如音乐类的（需要在后台播放），运动类的需要实时监测运动轨迹等，还有一些需要在后台下载一些东西。iOS系统为需要后台运行的app提供了三种技术：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;你的app在前台开启了一个短期任务，在进入后台的时候可以向系统申请时间去完成这个任务&lt;/li&gt;
  &lt;li&gt;app在前台开启了一个下载任务，可以将这些下载的任务交给系统。由此，app可以在挂起或者进入后台的时候继续下载任务&lt;/li&gt;
  &lt;li&gt;app需要在后台执行某些特定的任务，需要声明一个或者多个的后台执行模式
    &lt;h2 id=&quot;执行有限时长的任务&quot;&gt;执行有限时长的任务&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;app在退到后台的时候，会进入到一个休眠状态，系统会很快将app挂起。如果你的app需要一些额外时间去完成任务你可以用UIApplication对象的 &lt;code class=&quot;highlighter-rouge&quot;&gt;beginBackgroundTaskWithName:expirationHandler: or beginBackgroundTaskWithExpirationHandler:&lt;/code&gt; 调用这个方法会暂时延迟app被挂起的时间，在任务完成的时候你需要调用&lt;code class=&quot;highlighter-rouge&quot;&gt;endBackgroundTask: &lt;/code&gt; 去告诉系统完成了任务，并且系统可以将其挂起。调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;beginBackgroundTaskWithName:expirationHandler: or beginBackgroundTaskWithExpirationHandler: &lt;/code&gt;会生成一个对应的任务的token。当完成一个对应任务的时候必须调用&lt;code class=&quot;highlighter-rouge&quot;&gt;endBackgroundTask:&lt;/code&gt;传入对应的token，让系统知道，任务已经完成。如果没有调用此方法就会导致app crash。如果你提供了一个任务过期的handler，在任务完成的时候系统会调用这个handler去终结这个任务去避免app crash。
 &lt;code class=&quot;highlighter-rouge&quot;&gt;beginBackgroundTaskWithName:expirationHandler: or beginBackgroundTaskWithExpirationHandler:&lt;/code&gt; 在前台的时候也可以调用，只要你再任务完成时调用&lt;code class=&quot;highlighter-rouge&quot;&gt;endBackgroundTask:&lt;/code&gt;即可&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)applicationDidEnterBackground:(UIApplication *)application
{
    bgTask = [application beginBackgroundTaskWithName:@&quot;MyTask&quot; expirationHandler:^{
        // Clean up any unfinished task business by marking where you
        // stopped or ending the task outright.
        [application endBackgroundTask:bgTask];
        bgTask = UIBackgroundTaskInvalid;
    }];
 
    // Start the long-running task and return immediately.
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        // Do the work associated with the task, preferably in chunks.
 
        [application endBackgroundTask:bgTask];
        bgTask = UIBackgroundTaskInvalid;
    });
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个方法中bgTask就是要执行的延时任务，expirationHandler就是一个任务过期的回调，以防任务时间过长，或者是调用endBackgroundTask失败。这个任务交给了GCD全局异步队列。&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/iOS-app-%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/iOS-app-%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81/</guid>
        
        
      </item>
    
      <item>
        <title>[摘] Strong-Weak Dance</title>
        <description>&lt;h1 id=&quot;摘-strong-weak-dance&quot;&gt;[摘] Strong-Weak Dance&lt;/h1&gt;

&lt;p&gt;在使用 Block 时，除了使用 __weak 修饰符避免循环引用外，还有一点经常容易忘记。苹果把它称为：“Strong-Weak Dance”。&lt;/p&gt;

&lt;h3 id=&quot;问题来源&quot;&gt;问题来源&lt;/h3&gt;

&lt;p&gt;这是一种 强引用 –&amp;gt; 弱引用 –&amp;gt; 强引用 的变换过程。在弄明白为什么要如此大费周章之前，我们首先来看看一般的写法会有什么问题&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__weak MyViewController *wself = self;
self.completionHandler = ^(NSInteger result) {
    [wself.property removeObserver: wself forKeyPath:@&quot;pathName&quot;];
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这种写法可以避免循环引用，但是我们要考虑这样的问题：&lt;/p&gt;

&lt;p&gt;假设 block 被放在子线程中执行，而且执行过程中 self 在主线程被释放了。由于 wself 是一个弱引用，因此会自动变为 nil。而在 KVO 中，这会导致崩溃。&lt;/p&gt;

&lt;h3 id=&quot;strong-weak-dance&quot;&gt;Strong-Weak Dance&lt;/h3&gt;

&lt;p&gt;解决以上问题的方法很简单，新增一行代码即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__weak MyViewController *wself = self;
self.completionHandler = ^(NSInteger result) {
    __strong __typeof(wself) sself = wself; // 强引用一次
    [sself.property removeObserver: sself forKeyPath:@&quot;pathName&quot;];
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样一来，self 所指向对象的引用计数变成 2，即使主线程中的 self 因为超出作用于而释放，对象的引用计数依然为 1，避免了对象的销毁&lt;/p&gt;

&lt;p&gt;1  Q：下面这行代码，将一个弱引用的指针赋值给强引用的指针，可以起到强引用效果么？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__strong __typeof(wself) sself = wself;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A：会的。引用计数描述的是对象而不是指针。这句话的意思是:
sself 强引用 wself 指向的那个对象 因此对象的引用计数会增加一个&lt;/p&gt;

&lt;p&gt;2  Q: block 内部定义了sself，会不会因此强引用了 sself？
A：不会。block 只有截获外部变量时，才会引用它。如果是内部新建一个，则没有任何问题&lt;/p&gt;

&lt;p&gt;3 Q: Q：如果在 block 内部没有强引用，而是通过 if 判断，是不是也可以，比如这样写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__weak MyViewController *wself = self;
 wself.completionHandler = ^(NSInteger result) {
     if (wself) { // 只有当 wself 不为 nil 时，才执行以下代码
         [wself.property removeObserver: wself forKeyPath:@&quot;pathName&quot;];
     }
 };
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A：不可以！考虑到多线程执行，也许在判断的时候，self 还没释放，但是执行 self 里面的代码时，就刚好释放了&lt;/p&gt;

&lt;p&gt;4 Q: 那按照这个说法，block 内部强引用也没用啊。也许 block 执行以前，self 就释放了。&lt;/p&gt;

&lt;p&gt;A：有用！如果在 block 执行以前，self 就释放了，那么 block 的引用计数降为 0，所以自己就会被释放。这样它根本就不会被执行。另外，如果执行一个为 nil 的闭包会导致崩溃。&lt;/p&gt;

&lt;p&gt;5 Q: 如果在执行 block 的过程中，block 被释放了怎么办？&lt;/p&gt;

&lt;p&gt;A：简单来说，block 还会继续执行，但是它捕获的指针会具有不确定的值，详细内容请参考&lt;a href=&quot;https://stackoverflow.com/questions/12272783/what-happens-when-a-block-is-set-to-nil-during-its-execution&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;摘自 BestSwifter&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/%E6%91%98-Strong-Weak-Dance/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/%E6%91%98-Strong-Weak-Dance/</guid>
        
        
      </item>
    
  </channel>
</rss>
